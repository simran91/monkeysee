package main

import "fmt"
import "./mimage"
import "./mods"
import "regexp"
import "./lib/util"
import "path/filepath"

//
// Demo program to show the usage of the functions and some of the mods provided...
//
func main() {

	sourceDir := "samples"
	destDir := "samples/autogenerated"
	sourceFiles := []string{"rgb.png", "rgb.jpg", "rgb.gif"}
	// sourceFiles := []string{"rgb.png"}

	// Compile the regex on where the '.' is so that we can parse filenames and save to new filenames later
	stringRegex := regexp.MustCompile(`\.`)

	for _, sourceFile := range sourceFiles {
		fmt.Println("In:", filepath.Join(sourceDir, sourceFile))
		image := mimage.LoadImageFromFile(filepath.Join(sourceDir,sourceFile))

		destFileInit := string(stringRegex.ReplaceAll([]byte(sourceFile), []byte{'-'}))

		// 
		modSwapRGBtoGBR(destDir, destFileInit, image.ColourMatrix())
		modGreyscaleAverageWithTranslusence(destDir, destFileInit, image.ColourMatrix())
		modBlur(destDir, destFileInit, image.ColourMatrix(), 8)
		modBlurWithKernelMethod(destDir, destFileInit, image.ColourMatrix(), 8)
		modGaussianBlur(destDir, destFileInit, image.ColourMatrix())
		modAverageBlur(destDir, destFileInit, image.ColourMatrix())
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: SwapRGBtoGBR
//
func modSwapRGBtoGBR(destDir, destFileInit string, colourMatrix mimage.ImageMatrix) {
	modName := "SwapRGBtoGBR"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.SwapRGBtoGBR(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: GreyscaleAverageWithTranslusence
//
func modGreyscaleAverageWithTranslusence(destDir, destFileInit string, colourMatrix mimage.ImageMatrix) {
	modName := "GreyscaleAverageWithTranslusence"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.GreyscaleAverageWithTranslusence(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: Blur
//
func modBlur(destDir, destFileInit string, colourMatrix mimage.ImageMatrix, blurAmount int) {
	modName := "Blur"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.Blur(colourMatrix, blurAmount)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: modBlurWithKernelMethod
//
func modBlurWithKernelMethod(destDir, destFileInit string, colourMatrix mimage.ImageMatrix, blurAmount int) {
	modName := "BlurWithKernelMethod"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.BlurWithKernelMethod(colourMatrix, blurAmount)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: modGaussianBlur
//
func modGaussianBlur(destDir, destFileInit string, colourMatrix mimage.ImageMatrix) {
	modName := "GaussianBlur"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.GaussianBlur(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: modAverageBlur
//
func modAverageBlur(destDir, destFileInit string, colourMatrix mimage.ImageMatrix) {
	modName := "AverageBlur"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.AverageBlur(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := filepath.Join(destDir, modName, destFileInit + "-to-png.png")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-jpg.jpg")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = filepath.Join(destDir, modName, destFileInit + "-to-gif.gif")
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

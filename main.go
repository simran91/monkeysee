package main

import "fmt"
import "./mimage"
import "./mods"
import "regexp"
import "./lib/util"

//
// Demo program to show the usage of the functions and some of the mods provided...
//
func main() {

	sourceFiles := []string{"samples/rgb.png", "samples/rgb.jpg", "samples/rgb.gif"}
	// sourceFiles := []string{"samples/rgb.png"}

	// Compile the regex on where the '.' is so that we can parse filenames and save to new filenames later
	stringRegex := regexp.MustCompile(`\.`)

	for _, sourceFile := range sourceFiles {
		fmt.Println("In:", sourceFile)
		image := mimage.LoadImageFromFile(sourceFile)
		colourMatrix := image.ColourMatrix()
		destFileInit := string(stringRegex.ReplaceAll([]byte(sourceFile), []byte{'-'}))

		modSwapRGBtoGBR(destFileInit, image, colourMatrix)
		modGreyscaleAverageWithTranslusence(destFileInit, image, colourMatrix)
		modBlur(destFileInit, image, colourMatrix, 8)
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: SwapRGBtoGBR
//
func modSwapRGBtoGBR(destFileInit string, image *mimage.MImage, colourMatrix mimage.ImageMatrix) {
	modName := "SwapRGBtoGBR"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.SwapRGBtoGBR(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := destFileInit + "-to-png-mod-" + modName + "-autogenerated.png"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = destFileInit + "-to-jpg-mod-" + modName + "-autogenerated.jpg"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = destFileInit + "-to-gif-mod-" + modName + "-autogenerated.gif"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: GreyscaleAverageWithTranslusence
//
func modGreyscaleAverageWithTranslusence(destFileInit string, image *mimage.MImage, colourMatrix mimage.ImageMatrix) {
	modName := "GreyscaleAverageWithTranslusence"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.GreyscaleAverageWithTranslusence(colourMatrix)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := destFileInit + "-to-png-mod-" + modName + "-autogenerated.png"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = destFileInit + "-to-jpg-mod-" + modName + "-autogenerated.jpg"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = destFileInit + "-to-gif-mod-" + modName + "-autogenerated.gif"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// mod: Blur
//
func modBlur(destFileInit string, image *mimage.MImage, colourMatrix mimage.ImageMatrix, blurAmount int) {
	modName := "Blur"
	fmt.Printf("Running mods.%v\n", modName)

	newColourMatrix := mods.Blur(colourMatrix, blurAmount)
	newImage := mimage.ColourMatrixToImage(newColourMatrix)

	// Save as PNG
	destImage := destFileInit + "-to-png-mod-" + modName + "-autogenerated.png"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsPNG(destImage, newImage)

	// Save as JPG
	destImage = destFileInit + "-to-jpg-mod-" + modName + "-autogenerated.jpg"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsJPG(destImage, newImage)

	// Save as GIF
	destImage = destFileInit + "-to-gif-mod-" + modName + "-autogenerated.gif"
	fmt.Println("Out:", destImage)
	util.SaveImageToFileAsGIF(destImage, newImage)

	fmt.Println()
}
